@page "/signin"
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity;
@using Commerce.Infrastructure.Identity
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Authentication
@inject NavigationManager NavigationManager 
@inject IHostEnvironmentAuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager


<div class="text-center">

    <main class="form-signin">
        <EditForm Model="@signInModel" OnValidSubmit="Submit">
            <DataAnnotationsValidator />

            <img class="mb-4" src="/docs/5.0/assets/brand/bootstrap-logo.svg" alt="" width="72" height="57">

            <h1 class="h3 mb-3 fw-normal">Please sign in</h1>

            <div class="form-floating mb-3">
                <InputText type="email" class="form-control" id="floatingInput" placeholder="name@example.com" @bind-Value="signInModel.Email"></InputText>
                <label for="floatingInput">Email address</label>
                <ValidationMessage For="() => signInModel.Email" />
            </div>

            <div class="form-floating">
                <InputText type="password" class="form-control" id="floatingPassword" placeholder="Password" @bind-Value="signInModel.Password"></InputText>
                <label for="floatingPassword">Password</label>
                <ValidationMessage For="() => signInModel.Password" />
            </div>

            <div class="checkbox mb-3">
                <label>
                    <input type="checkbox" value="remember-me"> Remember me
                </label>
            </div>

            <button class="w-100 btn btn-lg btn-primary" type="submit">Sign in</button>

            <p class="mt-5 mb-3 text-muted">&copy; @DateTime.Now.Year</p>

        </EditForm>
    </main>

</div>

@code {
    SignInModel signInModel = new SignInModel();

    async Task Submit()
    {
        var user = await UserManager.FindByEmailAsync(signInModel.Email);

        if (user != null && await UserManager.CheckPasswordAsync(user, signInModel.Password))
        {
            var principal = await SignInManager.CreateUserPrincipalAsync(user);

            var identity = new System.Security.Claims.ClaimsIdentity(
                principal.Claims,
                Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationDefaults.AuthenticationScheme
            );
            principal = new System.Security.Claims.ClaimsPrincipal(identity);

            var authProperties = new AuthenticationProperties();
            
            await HttpContextAccessor.HttpContext!.SignInAsync(
                Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationDefaults.AuthenticationScheme, 
                principal, 
                authProperties);

            AuthenticationStateProvider.SetAuthenticationState(
                Task.FromResult(new AuthenticationState(principal)));

            NavigationManager.NavigateTo("/orders");
        }
/*       if (result.RequiresTwoFactor)
        {
            return RedirectToPage("./LoginWith2fa", new { ReturnUrl = returnUrl, RememberMe = Input.RememberMe });
        }
        if (result.IsLockedOut)
        {
            _logger.LogWarning("User account locked out.");
            return RedirectToPage("./Lockout");
        }
        else
        {
            ModelState.AddModelError(string.Empty, "Invalid login attempt.");
            return Page();
        }
        */
    }

    class SignInModel
    {
        [Required]
        public string Email { get; set; } = null!;

        [Required]
        public string Password { get; set; } = null!;

        public bool RememberMe { get; set; }
    }
}
